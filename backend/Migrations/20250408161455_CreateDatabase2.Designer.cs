// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408161455_CreateDatabase2")]
    partial class CreateDatabase2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.animal_photos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("animal_id")
                        .HasColumnType("integer");

                    b.Property<string>("photo_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("animal_photos");
                });

            modelBuilder.Entity("backend.Models.animal_types", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("animal_types");
                });

            modelBuilder.Entity("backend.Models.animals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("animal_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("habitat_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("preview_id")
                        .HasColumnType("text");

                    b.Property<int?>("test_id")
                        .HasColumnType("integer");

                    b.Property<string>("video_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("animal_type_id");

                    b.HasIndex("habitat_id");

                    b.HasIndex("test_id");

                    b.ToTable("animals");
                });

            modelBuilder.Entity("backend.Models.answer_options", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("is_correct")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("answer_options");
                });

            modelBuilder.Entity("backend.Models.favorite_animals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("animal_id")
                        .HasColumnType("integer");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("animal_id");

                    b.HasIndex("user_id");

                    b.ToTable("favorite_animals");
                });

            modelBuilder.Entity("backend.Models.habitats", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("habitats");
                });

            modelBuilder.Entity("backend.Models.question_answer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("answer_id")
                        .HasColumnType("integer");

                    b.Property<int?>("question_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("answer_id");

                    b.HasIndex("question_id");

                    b.ToTable("question_answer");
                });

            modelBuilder.Entity("backend.Models.question_types", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("question_types");
                });

            modelBuilder.Entity("backend.Models.questions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("question_type_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("question_type_id");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("backend.Models.test_questions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("question_id")
                        .HasColumnType("integer");

                    b.Property<int?>("test_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("question_id");

                    b.HasIndex("test_id");

                    b.ToTable("test_questions");
                });

            modelBuilder.Entity("backend.Models.test_score", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTimeOffset>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("score")
                        .HasColumnType("integer");

                    b.Property<int?>("test_id")
                        .HasColumnType("integer");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("test_id");

                    b.HasIndex("user_id");

                    b.ToTable("test_score");
                });

            modelBuilder.Entity("backend.Models.tests", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tests");
                });

            modelBuilder.Entity("backend.Models.users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("is_admin")
                        .HasColumnType("boolean");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("backend.Models.animals", b =>
                {
                    b.HasOne("backend.Models.animal_types", "animal_type")
                        .WithMany("animals")
                        .HasForeignKey("animal_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.habitats", "habitat")
                        .WithMany()
                        .HasForeignKey("habitat_id");

                    b.HasOne("backend.Models.tests", "test")
                        .WithMany()
                        .HasForeignKey("test_id");

                    b.Navigation("animal_type");

                    b.Navigation("habitat");

                    b.Navigation("test");
                });

            modelBuilder.Entity("backend.Models.favorite_animals", b =>
                {
                    b.HasOne("backend.Models.animals", "animal")
                        .WithMany("favorite_animals")
                        .HasForeignKey("animal_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.users", "user")
                        .WithMany("favorite_animals")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("animal");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.question_answer", b =>
                {
                    b.HasOne("backend.Models.answer_options", "answer_option")
                        .WithMany("question_answer")
                        .HasForeignKey("answer_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.questions", "question")
                        .WithMany("question_answer")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("answer_option");

                    b.Navigation("question");
                });

            modelBuilder.Entity("backend.Models.questions", b =>
                {
                    b.HasOne("backend.Models.question_types", "question_type")
                        .WithMany("questions")
                        .HasForeignKey("question_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("question_type");
                });

            modelBuilder.Entity("backend.Models.test_questions", b =>
                {
                    b.HasOne("backend.Models.questions", "question")
                        .WithMany("test_questions")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.tests", "test")
                        .WithMany("test_questions")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("question");

                    b.Navigation("test");
                });

            modelBuilder.Entity("backend.Models.test_score", b =>
                {
                    b.HasOne("backend.Models.tests", "test")
                        .WithMany("test_score")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("backend.Models.users", "user")
                        .WithMany("test_score")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("test");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backend.Models.animal_types", b =>
                {
                    b.Navigation("animals");
                });

            modelBuilder.Entity("backend.Models.animals", b =>
                {
                    b.Navigation("favorite_animals");
                });

            modelBuilder.Entity("backend.Models.answer_options", b =>
                {
                    b.Navigation("question_answer");
                });

            modelBuilder.Entity("backend.Models.question_types", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("backend.Models.questions", b =>
                {
                    b.Navigation("question_answer");

                    b.Navigation("test_questions");
                });

            modelBuilder.Entity("backend.Models.tests", b =>
                {
                    b.Navigation("test_questions");

                    b.Navigation("test_score");
                });

            modelBuilder.Entity("backend.Models.users", b =>
                {
                    b.Navigation("favorite_animals");

                    b.Navigation("test_score");
                });
#pragma warning restore 612, 618
        }
    }
}
